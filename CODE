import zipfile
import os

# Define the path to the uploaded zip file and the extraction directory
zip_path = "test.zip"
extraction_path = "dataset"

# Extract the contents of the zip file
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extraction_path)

# List the first few files/folders extracted to verify the contents
os.listdir(extraction_path)[:10]

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
from tqdm import tqdm
import matplotlib.pyplot as plt

# Path to dataset (change if different)
data_dir = "dataset"
categories = ["cats", "dogs"]

# Resize images to a fixed size (e.g., 64x64)
IMG_SIZE = 64

# Load and preprocess images
def load_data():
    data = []
    labels = []
    for category in categories:
        path = os.path.join(data_dir, category)
        class_label = categories.index(category)
        for img_name in tqdm(os.listdir(path), desc=f"Loading {category}"):
            try:
                img_path = os.path.join(path, img_name)
                img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
                data.append(img.flatten())
                labels.append(class_label)
            except Exception as e:
                continue
    return np.array(data), np.array(labels)

X, y = load_data()

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the pixel values
X_train = X_train / 255.0
X_test = X_test / 255.0

# Train SVM model
print("Training SVM model...")
model = SVC(kernel='linear')  # Try 'rbf' or 'poly' if needed
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=categories))
